#include "precomp.h"
#include "2DCollision.h"
#include "Entity.h"
#include "Camera.h"
#include "game.h"

namespace Tmpl8
{
	const int TILEMAP_WIDTH = 300;
	const int TILEMAP_HEIGHT = 20;


	int level1Map[TILEMAP_HEIGHT][TILEMAP_WIDTH] =
	{
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,55,14,15,16,17,18,78,79,80,81,74,75,76,77,78,79,80,81,48,49,50,51,44,45,46,47,78,79,80,81,74,75,76,77,0,0,0,0,78,79,80,81,19,20,21,22,74,75,76,77,23,24,25,26,82,83,42,43,78,79,80,81,48,49,50,51,82,83,42,43,78,79,80,81,74,75,76,77,0,0,0,0,44,45,46,47,78,79,80,81,27,322,323,324,325,326,327,328,329,330,331,332,78,79,80,81,78,79,80,81,48,49,50,51,82,83,42,43,74,75,76,77,82,83,42,43,78,79,80,81,48,49,50,51,44,45,46,47,78,79,80,81,82,83,42,43,74,75,76,77,78,79,80,81,74,75,76,77,78,79,80,81, 0, 0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,131,132,133,134,135,136,137,0,0,0,0,0,0,0,0,0,0,0,0,127,128,129,130,165,166,167,126,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,138,139,98,99,0,0,0,0,100,101,102,103,0,0,0,0,0,0,0,0,127,128,129,130,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,165,166,167,126,0,0,0,0,104,105,106,107,108,109,110,111,70,71,72,73,0,0,0,0,0,0,0,0,127,128,129,130,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,128,129,130,165,166,167,126,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0, 0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,186,187,188,189,190,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,182,183,184,185,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,193,0,0,0,0,0,0,0,0,194,195,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,182,183,184,185,0,0,0,0,0,154,155,156,157,158,159,160,161,162,163,164,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,182,183,184,185,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0, 0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,249,250,251,210,211,212,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,214,215,216,217,218,219,220,221,222,223,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0, 0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,271,272,273,274,275,276,277,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,278,279,238,239,240,241,242,243,244,245,246,247,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0, 0, 0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,294,295,296,297,298,299,300,301,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,302,303,304,305,306,307,266,267,268,269,270,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0, 0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0, 0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0, 0, 0, 0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0, 0, 0, 0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,9,10,11,12,13,28,29,30,31,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0, 0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,34,35,36,37,38,39,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,41,56,57,58,59,60,61,62,63,64,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0, 0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,67,68,69,84,85,86,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,87,88,89,90,91,92,93,94,95,96,97,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0, 0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,113,114,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,113,114,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,117,118,119,120,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,113,114,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,123,0,0,0,0,0,0,0,0,124,125,0,0,0,0,0,0,0,0,112,113,114,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,113,114,115,0,0,0,0,0,140,141,142,143,144,145,146,147,148,149,150,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,113,114,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0, 0},
		{169,170,171,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,151,152,153,168,169,170,171,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,169,170,171,172,0,0,0,0,151,152,153,168,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,169,170,171,172,0,0,0,0,0,173,174,175,176,177,178,179,0,0,0,0,0,0,0,0,0,0,0,0,169,170,171,172,151,152,153,168,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,181,196,197,0,0,0,0,198,199,200,201,0,0,0,0,0,0,0,0,151,152,153,168,0,0,0,0,0,0,0,0,0,0,0,0,169,170,171,172,151,152,153,168,0,0,0,0,202,203,204,205,206,207,208,209,224,225,226,227,0,0,0,0,0,0,0,0,169,170,171,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,169,170,171,172,151,152,153,168,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0, 0},
		{258,259,260,261,236,237,252,253,228,229,230,231,232,233,234,235,236,237,252,253,254,255,256,257,258,259,260,261,236,237,252,253,232,233,234,235,228,229,230,231,228,229,230,231,236,237,252,253,258,259,260,261,236,237,252,253,254,255,256,257,232,233,234,235,236,237,252,253,228,229,230,231,228,229,230,231,232,233,234,235,228,229,230,231,236,237,252,253,258,259,260,261,228,229,230,231,0,264,265,280,281,282,283,284,232,233,234,235,228,229,230,231,232,233,234,235,258,259,260,261,254,255,256,257,232,233,234,235,236,237,252,253,228,229,230,231,232,233,234,235,285,286,287,288,228,229,230,231,289,290,291,292,236,237,252,253,228,229,230,231,254,255,256,257,232,233,234,235,228,229,230,231,232,233,234,235,258,259,260,261,254,255,256,257,232,233,234,235,293,308,309,310,311,312,313,314,315,316,317,318,232,233,234,235,232,233,234,235,258,259,260,261,236,237,252,253,232,233,234,235,236,237,252,253,232,233,234,235,258,259,260,261,254,255,256,257,232,233,234,235,228,229,230,231,232,233,234,235,236,237,252,253,228,229,230,231,232,233,234,235, 0, 0}
	};

	int betterTiling[350] //This changes the tile from spritesheet to deadly-or-not (0-9 is passthrough, 10-290 is lethal, 291+ is special (we don't care))
	{
		0,291,10,11,12,13,14,292,15,16,17,1,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,293,38,39,40,41,42,43,44,294,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,
		61,62,63,64,65,66,67,68,69,295,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,2,296,89,90,297,3,4,91,92,93,94,95,298,299,300,301,96,97,98,99,100,101,102,103,104,105,
		106,107,108,109,302,110,111,112,303,304,305,5,6,306,113,114,115,116,117,307,118,119,120,121,308,309,122,123,124,125,126,310,127,128,129,130,131,132,133,134,135,136,137,138,139,
		311,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,312,155,156,157,158,313,314,159,160,161,162,163,164,315,165,167,168,316,317,318,7,8,319,320,321,322,323,169,170,
		324,171,172,173,174,175,176,177,178,179,325,326,180,181,327,328,9,329,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,
		330,331,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,332,230,231,232,233,234,235,236,333,237,238,239,240,241,242,243,244,245,246,247,248,249,
		250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290
	};

	int tileFromPosition(int position[2], int levelMap[][300]) //WARNING: LEVELMAP CANNOT BE BIGGER THAN 300 TILES.
	{
		int x = position[0] / TILESIZE;
		int y = position[1] / TILESIZE;
		if (y > TILEMAP_HEIGHT || y < 0) y = 0; //Anti-overflow
		if (x > TILEMAP_WIDTH || x < 0) x = 0;

		return levelMap[y][x];
	}

	bool triangleCalculation(int x, int y, //Player Position
		int x1, int y1, //Start
		int x2, int y2, //End
		bool compareToZero)
	{
		if (x2 - x1 == 0)
		{
			return false;
		}
		float multiplier = (float)(y2 - y1) / (float)(x2 - x1);

		if (compareToZero)
			for (int n = x1; n <= x2; n++)
			{
				if (x == n && (y < (round((n - x1) * multiplier)))) return true;
			}
		else
		{
			for (int n = x1; n <= x2; n++)
			{
				if (x == n && (y > (round((n - x1) * multiplier)))) return true;
			}
		}
		return false;
	}
	
	bool Collision2D::isPositionOnDeadlyTile(int position[2])
	{
		Entity* camera = Entity::GetEntityFromType(CAMERA);
		if (!camera) return false;
		position[0] += (int)camera->x;
		position[1] += (int)camera->y;
		int Tile = tileFromPosition(position, level1Map);
		//If we've hit a non-lethal tile
		if (betterTiling[Tile] <= 9) 
		{
			return false; //We aren't dead
		}
		else
		{
			//If we have hit a lethal tile
			if (betterTiling[Tile] <= 290) 
			{
				return true; //We are dead
			}
			//Special condition
			else 
			{
				int x = position[0] % TILESIZE; //Position inside tile
				int y = position[1] % TILESIZE; //Position inside tile
				int x1 = 0; //Start
				int y1 = 0; //Start
				int x2 = 0; //End
				int y2 = 0; //End
				bool compareToZero = true; //Compare against 0 or 16

				switch (Tile)
				{
				case 1:
				{
					if (y >= 16) return true;
					break;
				}
				case 7:
				case 32:
				{
					if (y >= 24) return true;
					break;
				}
				case 40:
				{
					x1 = 4;
					y1 = 0;
					x2 = 30;
					y2 = 16;
					compareToZero = true;
					break;
				}
				case 66:
				{
					if (y <= 16) return true;
					break;
				}
				case 87:
				{
					x1 = 18;
					y1 = 30;
					x2 = 30;
					y2 = 22;
					compareToZero = false;
					break;
				}
				case 90:
				{
					x1 = 0;
					y1 = 14;
					x2 = 30;
					y2 = 6;
					compareToZero = true;
					break;
				}
				case 98:
				{
					x1 = 0;
					y1 = 22;
					x2 = 30;
					y2 = 8;
					compareToZero = true;
					break;
				}
				case 99:
				{
					x1 = 0;
					y1 = 8;
					x2 = 24;
					y2 = 0;
					compareToZero = true;
					break;
				}
				case 100:
				{
					x1 = 8;
					y1 = 0;
					x2 = 30;
					y2 = 4;
					compareToZero = true;
					break;
				}
				case 101:
				{
					x1 = 0;
					y1 = 8;
					x2 = 15;
					y2 = 22;
					compareToZero = true;
					break;
				}
				case 116:
				{
					x1 = 14;
					y1 = 30;
					x2 = 30;
					y2 = 0;
					compareToZero = true;
					break;
				}
				case 120:
				{
					if (y > 12) return true;
					break;
				}
				case 121:
				{
					if (y > 10) return true;
					break;
				}
				case 122:
				case 125:
				{
					if (y > 18) return true;
					break;
				}
				case 131:
				{
					x1 = 0;
					y1 = 0;
					x2 = 30;
					y2 = 18;
					compareToZero = true;
					break;
				}
				case 136:
				{
					if (y > 14) return true;
					break;
				}
				case 137:
				{
					if (y > 10) return true;
					break;
				}
				case 143:
				{
					x1 = 0;
					y1 = 18;
					x2 = 16;
					y2 = 28;
					compareToZero = false;
					break;
				}
				case 157:
				{
					x1 = 0;
					y1 = 12;
					x2 = 16;
					y2 = 2;
					compareToZero = true;
					break;
				}
				case 173:
				{
					x1 = 0;
					y1 = 10;
					x2 = 30;
					y2 = 12;
					compareToZero = false;
					break;
				}
				case 178:
				{
					if (y < 18) return true;
					break;
				}
				case 179:
				{
					if (y < 22) return true;
					break;
				}
				case 186:
				{
					x1 = 12;
					y1 = 0;
					x2 = 30;
					y2 = 30;
					compareToZero = true;
					break;
				}
				case 190:
				case 191:
				{
					if (y < 20) return true;
					break;
				}
				case 192:
				case 195:
				{
					if (y < 14) return true;
					break;
				}
				case 196:
				{
					x1 = 0;
					y1 = 8;
					x2 = 30;
					y2 = 22;
					compareToZero = false;
					break;
				}
				case 197:
				{
					x1 = 0;
					y1 = 22;
					x2 = 24;
					y2 = 30;
					compareToZero = false;
					break;
				}
				case 198:
				{
					x1 = 30;
					y1 = 22;
					x2 = 6;
					y2 = 30;
					compareToZero = false;
					break;
				}
				case 199:
				{
					x1 = 0;
					y1 = 22;
					x2 = 30;
					y2 = 8;
					compareToZero = false;
					break;
				}
				case 202:
				{
					x1 = 0;
					y1 = 28;
					x2 = 30;
					y2 = 10;
					compareToZero = false;
					break;
				}
				case 212:
				{
					x1 = 0;
					y1 = 22;
					x2 = 30;
					y2 = 8;
					compareToZero = false;
					break;
				}
				case 213:
				{
					if (x > 16 && y > 24 && x < 28) return true;
					break;
				}
				case 216:
				{
					x1 = 0;
					y1 = 16;
					x2 = 30;
					y2 = 24;
					compareToZero = false;
					break;
				}
				case 217:
				{
					x1 = 0;
					y1 = 24;
					x2 = 30;
					y2 = 30;
					compareToZero = false;
					break;
				}
				case 219:
				{
					x1 = 0;
					y1 = 24;
					x2 = 0;
					y2 = 20;
					compareToZero = true;
					break;
				}
				case 247:
				{
					x1 = 0;
					y1 = 30;
					x2 = 26;
					y2 = 20;
					compareToZero = true;
					break;
				}
				case 248:
				{
					if (y > 16) return true;
					break;
				}
				case 270:
				{
					x1 = 0;
					y1 = 6;
					x2 = 28;
					y2 = 0;
					compareToZero = true;
					break;
				}
				case 278:
				{
					x1 = 4;
					y1 = 30;
					x2 = 26;
					y2 = 34;
					compareToZero = false;
					break;
				}
				default: {break; }
				}
				if (triangleCalculation(x, y, x1, y1, x2, y2, compareToZero)) return true;

			}
		}
		return false;
	}

	bool Collision2D::AABBOverlap(Entity* A, Entity* B)
	{
		return (A->x + A->xOffset < B->x + B->xOffset + B->width &&
			A->x + A->xOffset + A->width > B->x + B->xOffset &&
			A->y + A->yOffset < B->y + B->yOffset + B->height &&
			A->y + A->yOffset + A->height > B->y + B->yOffset);
	}

	bool Collision2D::didEntityHitTile(Entity* A)
	{
		int position1[2] = { (int)(A->x + A->xOffset), (int)(A->y + A->yOffset) }; //Initial global position (Top left)
		int position2[2] = { position1[0] + (int)A->width, position1[1] }; //Top right
		int position3[2] = { position1[0], position1[1] + (int)A->height }; //Bottom left
		int position4[2] = { position2[0], position3[1] }; //Bottom right

		//4 if return trues instead of a = isPosition[...] because if 1 is true, we don't want to run through isPosition 3 more times per frame.
		if (isPositionOnDeadlyTile(position1)) return true;
		if (isPositionOnDeadlyTile(position2)) return true;
		if (isPositionOnDeadlyTile(position3)) return true;
		if (isPositionOnDeadlyTile(position4)) return true;
		return false;
	}

}